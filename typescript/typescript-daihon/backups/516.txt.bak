# #516 「静的解析」

四国めたん「網羅性チェックと静的解析について学びましょう！」
ずんだもん「静的解析ってどう関係するの？」
四国めたん「TypeScriptの型システムは静的解析により、実行前にコードの正確性を検証します」
ずんだもん「具体的にどんな検証ができるの？」
四国めたん「網羅性チェック、到達不可能コード検出、型エラー検出などが静的に行われます」
ずんだもん「なるほど！実行せずにバグを見つけられるんだね！」
四国めたん「制御フロー分析やデータフロー分析により、高精度な検証が可能ですね」
ずんだもん「CI/CDパイプラインでの品質保証にも最適だよ！」

---

## 📺 画面表示用コード

```typescript
// 静的解析による網羅性検証
type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';

function validate(method: HttpMethod): boolean {
  if (method === 'GET') return true;
  if (method === 'POST') return true;
  const check: never = method; // 静的に検出
  return false;
}
```

```typescript
// 制御フロー分析
function process(value: string | null): string {
  if (value === null) {
    return 'null';
  }
  return value.toUpperCase(); // nullチェック済みと解析
}
```

```typescript
// データフロー分析
type User = { name: string; age?: number };

function greet(user: User): string {
  if (user.age !== undefined) {
    return `${user.name} (${user.age})`;
  }
  return user.name; // ageはundefinedと解析
}
```

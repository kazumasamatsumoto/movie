# #539 「ミドルウェア」

四国めたん「ミドルウェアでの網羅性チェックについて学びましょう！」
ずんだもん「ミドルウェアでどう使うの？」
四国めたん「リクエストタイプやアクションを判別Union型で定義し、すべてのケースを処理します」
ずんだもん「具体的にどう実装するの？」
四国めたん「ミドルウェアの処理分岐で、never型により未処理ケースを検出できますね」
ずんだもん「なるほど！リクエスト処理の漏れを防げるんだね！」
四国めたん「Express、Nest.js両方で活用できる汎用的なパターンですね」
ずんだもん「APIの品質と保守性が向上するよ！」

---

## 📺 画面表示用コード

```typescript
// ミドルウェアでのリクエストタイプ処理
type RequestType = 'json' | 'form' | 'multipart';

@Injectable()
export class RequestParserMiddleware implements NestMiddleware {
  use(req: Request, res: Response, next: NextFunction) {
    const contentType = this.getRequestType(req);

    if (contentType === 'json') return this.parseJson(req, next);
    if (contentType === 'form') return this.parseForm(req, next);
    if (contentType === 'multipart') return this.parseMultipart(req, next);
    const check: never = contentType;
    next();
  }
}
```

```typescript
// 認証ミドルウェア
type AuthMethod = 'bearer' | 'basic' | 'apikey';

function authenticate(method: AuthMethod, req: Request): boolean {
  if (method === 'bearer') return validateBearer(req);
  if (method === 'basic') return validateBasic(req);
  if (method === 'apikey') return validateApiKey(req);
  const check: never = method;
  return false;
}
```

```typescript
// ロギングミドルウェア
type LogLevel = 'debug' | 'info' | 'warn' | 'error';

function logRequest(level: LogLevel, message: string) {
  if (level === 'debug') return logger.debug(message);
  if (level === 'info') return logger.info(message);
  if (level === 'warn') return logger.warn(message);
  if (level === 'error') return logger.error(message);
  const check: never = level;
}
```

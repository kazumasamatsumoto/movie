# #518 「ベストプラクティス」

四国めたん「網羅性チェックのベストプラクティスについて学びましょう！」
ずんだもん「どう書くのがベストなの？」
四国めたん「exhaustiveCheck関数の定義、判別Union型の活用、型ガードの適切な配置が重要です」
ずんだもん「具体的なパターンを見せて！」
四国めたん「共通のヘルパー関数を定義し、すべての分岐でnever型チェックを行います」
ずんだもん「なるほど！チーム全体で統一できるんだね！」
四国めたん「ESLintルールと組み合わせることで、さらに堅牢になりますね」
ずんだもん「コードレビューも効率化されるよ！」

---

## 📺 画面表示用コード

```typescript
// ヘルパー関数の定義
function assertNever(value: never, message?: string): never {
  throw new Error(message ?? `Unexpected value: ${value}`);
}

function exhaustiveCheck(value: never): never {
  assertNever(value, 'Unhandled case');
}
```

```typescript
// 判別Union型の活用
type Result<T, E> =
  | { success: true; value: T }
  | { success: false; error: E };

function unwrap<T, E>(result: Result<T, E>): T {
  if (result.success) return result.value;
  else if (!result.success) throw result.error;
  else return exhaustiveCheck(result);
}
```

```typescript
// switch文での統一パターン
type Action = 'save' | 'load' | 'delete';

function execute(action: Action): void {
  switch (action) {
    case 'save': return save();
    case 'load': return load();
    case 'delete': return remove();
    default: return exhaustiveCheck(action);
  }
}
```

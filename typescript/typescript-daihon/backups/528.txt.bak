# #528 「Exclude<T, never>」

四国めたん「Exclude<T, never>の挙動について学びましょう！」
ずんだもん「Exclude<T, never>ってどうなるの？」
四国めたん「Exclude<T, never>は常にTになります。never型は除外対象にならないからですね」
ずんだもん「具体的にどういうこと？」
四国めたん「T extends never ? never : T で、Tのすべての要素がneverでないため、元のTが返されますね」
ずんだもん「なるほど！never型を除外しても意味がないんだね！」
四国めたん「Union型の性質として、neverは既に消えているため当然の結果ですね」
ずんだもん「型演算の恒等式として覚えておくよ！」

---

## 📺 画面表示用コード

```typescript
// Exclude<T, never>の挙動
type Exclude<T, U> = T extends U ? never : T;

type A = Exclude<string, never>;           // string
type B = Exclude<string | number, never>;  // string | number
type C = Exclude<never, never>;            // never
```

```typescript
// 比較：他のExclude
type D = Exclude<string | number, string>;  // number
type E = Exclude<'a' | 'b' | 'c', 'a'>;    // 'b' | 'c'

// never除外は無意味
type F = Exclude<string | never, never>;    // string
```

```typescript
// 実践例：型演算の最適化
type RemoveNever<T> = T extends never ? never : T;
// これはT自体と同じ（最適化で除去可能）

type Original = string | number | never;  // string | number
type Filtered = RemoveNever<Original>;    // string | number
```

# #526 「条件付き型」

四国めたん「条件付き型とnever型の関係について学びましょう！」
ずんだもん「条件付き型ってどう使うの？」
四国めたん「T extends U ? X : Y の形式で、型レベルの条件分岐を実現できます」
ずんだもん「never型はどう関係するの？」
四国めたん「条件に合わない型をneverにすることで、Union型から除外できますね」
ずんだもん「なるほど！型のフィルタリングができるんだね！」
四国めたん「TypeScriptの型システムで最も強力な機能の一つですね」
ずんだもん「Utility Typesの実装に欠かせないよ！」

---

## 📺 画面表示用コード

```typescript
// 条件付き型の基本
type IsString<T> = T extends string ? true : false;

type A = IsString<string>;   // true
type B = IsString<number>;   // false
type C = IsString<'hello'>;  // true
```

```typescript
// neverを使ったフィルタリング
type Filter<T> = T extends string ? T : never;

type Result = Filter<string | number | boolean>;
// = Filter<string> | Filter<number> | Filter<boolean>
// = string | never | never
// = string
```

```typescript
// 実践例：関数型の抽出
type FunctionKeys<T> = {
  [K in keyof T]: T[K] extends Function ? K : never
}[keyof T];

type Methods = FunctionKeys<{
  name: string;
  getName(): string;
  age: number;
}>;  // = 'getName'
```

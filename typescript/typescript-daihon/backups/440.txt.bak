# #440「ジェネリクスまとめ」

四国めたん「ジェネリクスとvoid型についてまとめましょう！」
ずんだもん「ジェネリクスでのvoidのポイントを教えて！」
四国めたん「型パラメータとして void を使えます。戻り値を期待しない関数の汎用的な型定義ができますね」
ずんだもん「どう使えばいいの？」
四国めたん「Callback<T>、Promise<void>、デフォルト型パラメータで使います。型推論も働きますね」
ずんだもん「なるほど！柔軟な型定義ができるんだね！」
四国めたん「条件付き型、Mapped Types、Utility Typesとも組み合わせられます。コールバックの戻り値は柔軟に扱われます。TypeScript v5.9でも重要なパターンですね」
ずんだもん「ジェネリクスで型安全に書けて最高だよ！」

---

## 📺 画面表示用コード

```typescript
// 基本的なジェネリクス
type Callback<T> = (data: T) => void;
const handler: Callback<User> = (user) => {
  console.log(user.name);
};
```

```typescript
// デフォルト型パラメータ
type Handler<T = void> = (data: T) => void;
const voidHandler: Handler = () => {
  console.log("Done");
};
```

```typescript
// 実践例
class EventEmitter<T = void> {
  on(listener: (data: T) => void): void {
    // イベント登録
  }
}
```

# #382「明示的宣言」

四国めたん「void型の明示的宣言について学びましょう！」
ずんだもん「いつvoidを明示的に書くべき？」
四国めたん「公開API、インターフェース定義、重要な関数で明示的に書きます。意図を明確にしますね」
ずんだもん「書かない場合は？」
四国めたん「内部のヘルパー関数や短い関数は型推論に任せても良いです。コードがシンプルになりますね」
ずんだもん「なるほど！重要度で判断するんだね！」
四国めたん「ESLintで強制することも可能です。チームの規約に従いますね」
ずんだもん「一貫性が大事なんだね！」

---

## 📺 画面表示用コード

```typescript
// 明示的宣言が推奨される場面
export function initialize(config: Config): void {
  // 公開API
}
interface Logger {
  log(message: string): void;  // インターフェース
}
```

```typescript
// 型推論でも良い場面
const logError = (err: Error) => {
  console.error(err);  // 内部関数
};
```

```typescript
// ESLintでの強制
// .eslintrc.json
{
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "error"
  }
}
```

# #424「エラーハンドリング」

四国めたん「Promise<void>のエラーハンドリングについて学びましょう！」
ずんだもん「エラーはどう扱うの？」
四国めたん「try-catch または catch()メソッドを使います。通常のPromiseと同じですね」
ずんだもん「どっちがいいの？」
四国めたん「async/await では try-catch、then() では catch() を使います。状況に応じて選びますね」
ずんだもん「なるほど！両方使えるんだね！」
四国めたん「エラーハンドリングは必須です。TypeScript v5.9でも重要なパターンですね」
ずんだもん「安全に処理できるんだね！」

---

## 📺 画面表示用コード

```typescript
// try-catchでエラーハンドリング
async function process(): Promise<void> {
  try {
    await saveData(data);
    await notify("Success");
  } catch (error) {
    console.error("Failed:", error);
  }
}
```

```typescript
// catch()メソッド
saveData(data)
  .then(() => notify("Success"))
  .catch((error) => {
    console.error("Failed:", error);
  });
```

```typescript
// finallyも使える
async function withCleanup(): Promise<void> {
  try {
    await processData();
  } catch (error) {
    console.error(error);
  } finally {
    await cleanup();
  }
}
```

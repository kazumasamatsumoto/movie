# #444「Observable<void>」

四国めたん「Observable<void>の詳細について学びましょう！」
ずんだもん「Observable<void>はどう作るの？」
四国めたん「Subject<void>やfromEventなどで作成します。値を発行せず、完了だけを通知しますね」
ずんだもん「購読するとどうなるの？」
四国めたん「コールバックは引数なしで呼ばれます。完了やエラーを検知できますね」
ずんだもん「なるほど！イベントストリームなんだね！」
四国めたん「finalize()やcomplete()と組み合わせて使います。TypeScript v5.9でも実用的ですね」
ずんだもん「非同期イベント管理に便利だね！」

---

## 📺 画面表示用コード

```typescript
// Subject<void>の作成
import { Subject } from 'rxjs';

const click$ = new Subject<void>();
click$.subscribe(() => {
  console.log('Clicked');
});
click$.next();  // イベント発火
```

```typescript
// fromEventでの使用
import { fromEvent } from 'rxjs';

const button = document.getElementById('btn');
const clicks$: Observable<void> = fromEvent(button!, 'click')
  .pipe(map(() => undefined));
```

```typescript
// finalize()との組み合わせ
import { finalize } from 'rxjs/operators';

operation$.pipe(
  finalize((): void => {
    console.log('Cleanup');
  })
).subscribe();
```

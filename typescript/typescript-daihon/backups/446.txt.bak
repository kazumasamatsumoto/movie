# #446「Nest.jsコントローラ」

四国めたん「Nest.jsのコントローラとvoid型について学びましょう！」
ずんだもん「Nest.jsでvoid型は使うの？」
四国めたん「はい、戻り値がないエンドポイントで Promise<void> を使います。204 No Contentを返す場合などですね」
ずんだもん「どう書くの？」
四国めたん「@HttpCode(204)デコレータと組み合わせます。RESTful APIの削除操作などで使いますね」
ずんだもん「なるほど!レスポンスボディがない時なんだね！」
四国めたん「明示的にステータスコードを指定します。TypeScript v5.9でも推奨されるパターンですね」
ずんだもん「API設計で重要なんだね！」

---

## 📺 画面表示用コード

```typescript
// Nest.jsコントローラ
import { Controller, Delete, HttpCode } from '@nestjs/common';

@Controller('users')
export class UsersController {
  @Delete(':id')
  @HttpCode(204)
  async delete(@Param('id') id: string): Promise<void> {
    await this.usersService.delete(id);
  }
}
```

```typescript
// POSTでのvoid
@Controller('notifications')
export class NotificationsController {
  @Post('send')
  @HttpCode(204)
  async send(@Body() dto: SendDto): Promise<void> {
    await this.notificationService.send(dto);
  }
}
```

```typescript
// PUTでの更新
@Put(':id')
@HttpCode(204)
async update(@Param('id') id: string, @Body() dto: UpdateDto): Promise<void> {
  await this.service.update(id, dto);
}
```

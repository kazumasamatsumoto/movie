# #535 「型演算まとめ」

四国めたん「never型を使った型演算のまとめです！」
ずんだもん「これまで何を学んだの？」
四国めたん「Union型でneverは消える、Intersection型でneverになる、条件付き型でのフィルタリングを学びました」
ずんだもん「どんな効果があるの？」
四国めたん「型レベルプログラミング、高度な型変換、コンパイル時の型安全性向上が実現できます」
ずんだもん「なるほど！TypeScriptの型システムの核心だね！」
四国めたん「これらの知識により、Utility Typesの理解や独自の型ヘルパーの実装が可能になりますね」
ずんだもん「型演算を使いこなして型安全な開発を進めるよ！」

---

## 📺 画面表示用コード

```typescript
// 型演算の基本法則
type Law1 = string | never;        // = string
type Law2 = string & never;        // = never
type Law3 = Exclude<T, never>;     // = T
type Law4 = Extract<never, T>;     // = never
```

```typescript
// 実践的な型ヘルパー
type NonNullable<T> = T extends null | undefined ? never : T;
type FunctionKeys<T> = {
  [K in keyof T]: T[K] extends Function ? K : never
}[keyof T];
type PickByType<T, U> = {
  [K in keyof T as T[K] extends U ? K : never]: T[K]
};
```

```typescript
// 複合的な型演算
type DeepPartial<T> = {
  [K in keyof T]?: T[K] extends object
    ? DeepPartial<T[K]>
    : T[K]
};

type Result<T, E> =
  | { ok: true; value: T }
  | { ok: false; error: E };
```

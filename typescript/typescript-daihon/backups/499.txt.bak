# #499「ベストプラクティス」

四国めたん「無限ループのベストプラクティスについて学びましょう！」
ずんだもん「無限ループを使う時のポイントを教えて！」
四国めたん「明示的に never 型を書き、適切に待機します。エラーハンドリングも必須ですね」
ずんだもん「他に注意点は？」
四国めたん「終了シグナルを実装し、リソースを適切に管理します。ログも記録しますね」
ずんだもん「なるほど！保守性が大事なんだね！」
四国めたん「テストは困難なので、分離して設計します。TypeScript v5.9でも推奨されるパターンですね」
ずんだもん「設計が重要なんだね！」

---

## 📺 画面表示用コード

```typescript
// ベストプラクティス1: 明示的な型と待機
function serverLoop(): never {
  console.log("Server started");
  while (true) {
    const request = waitForRequest();
    handleRequest(request);
  }
}
```

```typescript
// ベストプラクティス2: エラーハンドリング
function safeLoop(): never {
  while (true) {
    try {
      processTask();
    } catch (error) {
      console.error("Error:", error);
    }
    await delay(1000);
  }
}
```

```typescript
// ベストプラクティス3: 終了シグナル
let shouldRun = true;
function gracefulLoop(): void {
  while (shouldRun) {
    doWork();
  }
  cleanup();
}
process.on('SIGTERM', () => { shouldRun = false; });
```

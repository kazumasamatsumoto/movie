# #503「exhaustive check関数」

四国めたん「exhaustive check関数について学びましょう！」
ずんだもん「exhaustive check関数ってどんな関数？」
四国めたん「網羅性チェック専用の関数です。never型を引数に取り、例外を投げますね」
ずんだもん「どう定義するの？」
四国めたん「function assertNever(value: never): never の形式です。到達したら実行時エラーですね」
ずんだもん「なるほど！コンパイル時と実行時で守るんだね！」
四国めたん「プロジェクト全体で再利用できます。TypeScript v5.9でも推奨されるパターンですね」
ずんだもん「標準的な関数なんだね！」

---

## 📺 画面表示用コード

```typescript
// exhaustive check関数の定義
function assertNever(value: never): never {
  throw new Error(`Unexpected value: ${value}`);
}
```

```typescript
// 使用例
type Shape = "circle" | "square" | "triangle";

function getArea(shape: Shape): number {
  switch (shape) {
    case "circle": return Math.PI;
    case "square": return 1;
    case "triangle": return 0.5;
    default: return assertNever(shape);
  }
}
```

```typescript
// カスタムエラーメッセージ
function exhaustiveCheck(value: never, message?: string): never {
  throw new Error(
    message || `Unhandled discriminated union member: ${JSON.stringify(value)}`
  );
}
```

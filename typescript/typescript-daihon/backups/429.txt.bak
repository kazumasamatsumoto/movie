# #429「ベストプラクティス」

四国めたん「Promise<void>のベストプラクティスについて学びましょう！」
ずんだもん「どう使うのがベストなの？」
四国めたん「明示的に Promise<void> を書き、async/await を使います。then() より読みやすいですね」
ずんだもん「他に注意点は？」
四国めたん「エラーハンドリングを必ず行い、finally() でクリーンアップします。並行実行も活用しますね」
ずんだもん「なるほど！安全性と効率が大事なんだね！」
四国めたん「Promise を返し忘れないことも重要です。TypeScript v5.9でも基本的な原則ですね」
ずんだもん「型安全に書けるんだね！」

---

## 📺 画面表示用コード

```typescript
// ベストプラクティス1: 明示的な型宣言
async function saveData(data: Data): Promise<void> {
  await database.save(data);
}
```

```typescript
// ベストプラクティス2: エラーハンドリング
async function process(): Promise<void> {
  try {
    await processData();
  } catch (error) {
    console.error("Failed:", error);
    throw error;
  } finally {
    await cleanup();
  }
}
```

```typescript
// ベストプラクティス3: 並行実行の活用
async function processAll(items: Item[]): Promise<void> {
  await Promise.all(items.map(item => saveItem(item)));
}
```

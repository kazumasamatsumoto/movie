# #536 「Angularガード」

四国めたん「Angularガードとnever型について学びましょう！」
ずんだもん「Angularガードでnever型をどう使うの？」
四国めたん「ルートガードの戻り値型で、到達不可能なケースをnever型で表現できます」
ずんだもん「具体的にどう書くの？」
四国めたん「CanActivateの戻り値をObservable<boolean | UrlTree | never>と定義し、エラー時の型安全性を確保します」
ずんだもん「なるほど！型安全なナビゲーション制御ができるんだね！」
四国めたん「網羅性チェックと組み合わせることで、すべてのケースを処理できますね」
ずんだもん「ルーティングの品質が向上するよ！」

---

## 📺 画面表示用コード

```typescript
// Angular Guard with never型
type GuardResult = boolean | UrlTree | never;

@Injectable()
export class AuthGuard implements CanActivate {
  canActivate(route: ActivatedRouteSnapshot): Observable<GuardResult> {
    return this.authService.isAuthenticated$.pipe(
      map(isAuth => isAuth ? true : this.router.parseUrl('/login'))
    );
  }
}
```

```typescript
// 網羅的なガード実装
type AuthState = 'authenticated' | 'guest' | 'expired';

canActivate(state: AuthState): boolean | UrlTree {
  if (state === 'authenticated') return true;
  if (state === 'guest') return this.router.parseUrl('/login');
  if (state === 'expired') return this.router.parseUrl('/renew');
  const check: never = state;
  return false;
}
```

```typescript
// 型安全なリダイレクト
type RedirectResult =
  | { allow: true }
  | { allow: false; redirect: string };

function checkAccess(role: string): RedirectResult {
  if (role === 'admin') return { allow: true };
  return { allow: false, redirect: '/forbidden' };
}
```

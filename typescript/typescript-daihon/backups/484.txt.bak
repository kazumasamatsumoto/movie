# #484「スタックトレース」

四国めたん「スタックトレースについて学びましょう！」
ずんだもん「スタックトレースって何？」
四国めたん「エラーが発生した呼び出し履歴です。デバッグに重要な情報ですね」
ずんだもん「どう見るの？」
四国めたん「Error.stack プロパティで確認できます。関数の呼び出し順が分かりますね」
ずんだもん「なるほど！エラーの原因を追跡できるんだね！」
四国めたん「Error.captureStackTrace() でカスタマイズも可能です。TypeScript v5.9でも有効ですね」
ずんだもん「デバッグが楽になるんだね！」

---

## 📺 画面表示用コード

```typescript
// スタックトレースの表示
function fail(message: string): never {
  const error = new Error(message);
  console.error(error.stack);
  throw error;
}
```

```typescript
// カスタムエラーのスタックトレース
class AppError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "AppError";
    Error.captureStackTrace(this, AppError);
  }
}

function throwAppError(): never {
  throw new AppError("Application error");
}
```

```typescript
// スタックトレースの利用
try {
  fail("Something went wrong");
} catch (error) {
  if (error instanceof Error) {
    console.error("Stack trace:", error.stack);
  }
}
```

# #510 「実践例(2)」

四国めたん「Nest.jsでの網羅性チェック実践例について学びましょう！」
ずんだもん「Nest.jsでどう活用するの？」
四国めたん「DTOやイベントハンドラで、すべてのケースを型安全に処理できます」
ずんだもん「具体的な実装を見せて！」
四国めたん「イベント駆動アーキテクチャで、全イベントタイプを網羅的にハンドリングする例です」
ずんだもん「なるほど！新しいイベント追加時も安全だね！」
四国めたん「マイクロサービス間の通信でも型安全性が保証されますね」
ずんだもん「エンタープライズ開発に最適だよ！」

---

## 📺 画面表示用コード

```typescript
type DomainEvent =
  | { type: 'UserCreated'; userId: string }
  | { type: 'UserUpdated'; userId: string; data: any }
  | { type: 'UserDeleted'; userId: string };
```

```typescript
class EventHandler {
  handle(event: DomainEvent): void {
    if (event.type === 'UserCreated') this.onCreate(event);
    else if (event.type === 'UserUpdated') this.onUpdate(event);
    else if (event.type === 'UserDeleted') this.onDelete(event);
    else this.exhaustiveCheck(event);
  }

  exhaustiveCheck(value: never): never {
    throw new Error(`Unhandled: ${value}`);
  }
}
```

```typescript
// Angular HTTPレスポンス処理
type ApiResponse<T> =
  | { status: 'success'; data: T }
  | { status: 'error'; error: string };

function process<T>(res: ApiResponse<T>) {
  if (res.status === 'success') return res.data;
  if (res.status === 'error') throw new Error(res.error);
  const check: never = res;
}
```

# #398「オーバーロード」

四国めたん「void型の関数オーバーロードについて学びましょう！」
ずんだもん「オーバーロードでvoidはどう使うの？」
四国めたん「引数の組み合わせによって void を返すシグネチャを定義できます。柔軟な関数設計が可能ですね」
ずんだもん「具体的にどう書くの？」
四国めたん「オーバーロードシグネチャで void を指定し、実装シグネチャで処理を書きます」
ずんだもん「なるほど！引数で戻り値型が変わるんだね！」
四国めたん「型安全性を保ちながら柔軟な関数を作れます。TypeScript v5.9でも有効なパターンですね」
ずんだもん「高度な型定義ができるんだね！」

---

## 📺 画面表示用コード

```typescript
// オーバーロードでvoid
function process(data: string): string;
function process(data: number): void;
function process(data: string | number): string | void {
  if (typeof data === "string") return data.toUpperCase();
  console.log(data);
}
```

```typescript
// 実用例
function log(message: string): void;
function log(level: string, message: string): void;
function log(levelOrMsg: string, message?: string): void {
  if (message) {
    console.log(`[${levelOrMsg}] ${message}`);
  } else {
    console.log(levelOrMsg);
  }
}
```

```typescript
// コールバックのオーバーロード
function forEach(callback: (item: number) => void): void;
function forEach(start: number, callback: (item: number) => void): void;
function forEach(startOrCb: any, callback?: any): void {
  // 実装
}
```

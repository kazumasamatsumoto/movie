# #431「ジェネリクスのvoid型」

四国めたん「ジェネリクスでのvoid型について学びましょう！」
ずんだもん「ジェネリクスでvoidは使えるの？」
四国めたん「はい、型パラメータとして void を渡せます。戻り値を期待しない関数の型定義に使いますね」
ずんだもん「どういう場面で使うの？」
四国めたん「コールバック関数、イベントハンドラ、非同期処理など、戻り値の型をジェネリクスで表現する時に使います」
ずんだもん「なるほど！柔軟な型定義ができるんだね！」
四国めたん「Promise<void>もジェネリクスの一例です。TypeScript v5.9でも重要なパターンですね」
ずんだもん「ジェネリクスで汎用的に書けるんだね！」

---

## 📺 画面表示用コード

```typescript
// ジェネリクスでvoid型
type Callback<T> = (value: T) => void;
const numberCallback: Callback<number> = (n) => {
  console.log(n);
};
```

```typescript
// Promise<T>でのvoid
async function saveData(): Promise<void> {
  await database.save();
}
```

```typescript
// 関数型のジェネリクス
type Handler<T> = (data: T) => void;
const userHandler: Handler<User> = (user) => {
  console.log(user.name);
};
```

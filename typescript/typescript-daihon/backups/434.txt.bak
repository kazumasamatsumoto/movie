# #434「条件付き型」

四国めたん「void型と条件付き型について学びましょう！」
ずんだもん「条件付き型でvoidはどう使うの？」
四国めたん「T extends void で void 型かどうかを判定できます。型の分岐に使いますね」
ずんだもん「どういう時に使うの？」
四国めたん「戻り値の有無で処理を変える型定義で使います。高度な型操作ですね」
ずんだもん「なるほど！型レベルの条件分岐なんだね！」
四国めたん「ライブラリやフレームワークの型定義で活用されます。TypeScript v5.9でも強力な機能ですね」
ずんだもん「複雑な型も表現できるんだね！」

---

## 📺 画面表示用コード

```typescript
// 条件付き型でvoid判定
type IsVoid<T> = T extends void ? true : false;
type Test1 = IsVoid<void>;    // true
type Test2 = IsVoid<number>;  // false
```

```typescript
// 戻り値型による分岐
type ResultType<T> = T extends void
  ? { success: true }
  : { success: true; data: T };
```

```typescript
// 実用例
type AsyncResult<T> = T extends void
  ? Promise<void>
  : Promise<{ data: T }>;
async function fetch1(): AsyncResult<void> {
  return;
}
```

# #513「else節での網羅性」

四国めたん「else節での網羅性チェックについて学びましょう！」
ずんだもん「else節が重要なの？」
四国めたん「はい、else節でnever型チェックをします。すべての条件を処理した証明になりますね」
ずんだもん「なぜelse節？」
四国めたん「すべての条件分岐後、残る型がneverになるからです。型システムが網羅性を保証しますね」
ずんだもん「なるほど！最後の砦なんだね！」
四国めたん「else節を省略すると網羅性チェックができません。TypeScript v5.9でも必須パターンですね」
ずんだもん「必ず書くべきなんだね！」

---

## 📺 画面表示用コード

```typescript
// else節での網羅性チェック
type Status = "idle" | "loading" | "success" | "error";

function getStatusMessage(status: Status): string {
  if (status === "idle") {
    return "待機中";
  } else if (status === "loading") {
    return "読み込み中";
  } else if (status === "success") {
    return "完了";
  } else if (status === "error") {
    return "エラー";
  } else {
    // ここでnever型チェック
    return assertNever(status);
  }
}
```

```typescript
// else節がないと網羅性チェックできない
function badExample(status: Status): string {
  if (status === "idle") return "待機中";
  if (status === "loading") return "読み込み中";
  if (status === "success") return "完了";
  // "error"を忘れても型エラーにならない！
  return "不明";  // 危険
}
```

```typescript
// 三項演算子でのパターン
function getMessage(status: Status): string {
  return status === "idle" ? "待機中"
    : status === "loading" ? "読み込み中"
    : status === "success" ? "完了"
    : status === "error" ? "エラー"
    : assertNever(status);
}
```

# #508「never型での型エラー」

四国めたん「never型の型エラーについて学びましょう！」
ずんだもん「どんな時にエラーになるの？」
四国めたん「網羅性が不完全な時、never型に代入できずエラーになります。ケースの追加漏れを検出できますね」
ずんだもん「具体例を教えて！」
四国めたん「Union型に新しい型を追加した時、switch文がエラーになります。修正箇所がすぐわかりますね」
ずんだもん「なるほど！型で安全性を保証するんだね！」
四国めたん「リファクタリングの安全性が向上します。TypeScript v5.9でも重要な機能ですね」
ずんだもん「型システムが強力なんだね！」

---

## 📺 画面表示用コード

```typescript
// 型エラーの例
type Status = "pending" | "success" | "error" | "cancelled";

function handleStatus(status: Status): void {
  switch (status) {
    case "pending": break;
    case "success": break;
    case "error": break;
    default:
      // エラー: "cancelled"がneverに代入できない
      const _exhaustive: never = status;
  }
}
```

```typescript
// 修正後
function handleStatusFixed(status: Status): void {
  switch (status) {
    case "pending": break;
    case "success": break;
    case "error": break;
    case "cancelled": break;  // 追加
    default:
      const _exhaustive: never = status;  // OK
  }
}
```

```typescript
// 実用例
type Shape = Circle | Square | Triangle;

function getArea(shape: Shape): number {
  switch (shape.kind) {
    case "circle": return Math.PI * shape.radius ** 2;
    case "square": return shape.size ** 2;
    // triangleを忘れると型エラー
    default:
      return assertNever(shape);  // Error!
  }
}
```

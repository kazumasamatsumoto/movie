# #487「パターン」

四国めたん「never型の実践的なパターンについて学びましょう！」
ずんだもん「どんなパターンがあるの？」
四国めたん「網羅性チェック、アサーション、エラーヘルパー関数のパターンがあります」
ずんだもん「どう使い分けるの？」
四国めたん「switch文では網羅性チェック、前提条件ではアサーション、共通エラーではヘルパー関数ですね」
ずんだもん「なるほど！状況に応じて選ぶんだね！」
四国めたん「型安全性と保守性が向上します。TypeScript v5.9でも標準パターンですね」
ずんだもん「パターンを覚えれば使いこなせるんだね！」

---

## 📺 画面表示用コード

```typescript
// パターン1: 網羅性チェック
function assertNever(value: never): never {
  throw new Error(`Unhandled case: ${value}`);
}

type Action = "create" | "update" | "delete";
function handle(action: Action): void {
  switch (action) {
    case "create": return;
    case "update": return;
    case "delete": return;
    default: assertNever(action);
  }
}
```

```typescript
// パターン2: アサーション
function assert(condition: boolean, message: string): asserts condition {
  if (!condition) throw new Error(message);
}
```

```typescript
// パターン3: エラーヘルパー
function notImplemented(feature: string): never {
  throw new Error(`${feature} is not implemented`);
}
```

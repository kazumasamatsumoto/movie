# #547 「間違い(2) - 到達可能コード」

四国めたん「到達可能コードの誤解について学びましょう！」
ずんだもん「どんな間違いがあるの？」
四国めたん「never型の後にコードを書いてしまう、すべてのケースを処理したつもりで漏れがある、などですね」
ずんだもん「具体的にどう間違えるの？」
四国めたん「型ガードで絞り込み不足のまま網羅性チェックをしてしまう例が多いですね」
ずんだもん「なるほど！コンパイラを信じすぎるとダメなんだね！」
四国めたん「型エラーをよく読み、制御フローを正確に理解することが重要ですね」
ずんだもん「デバッグ時に気をつけるよ！」

---

## 📺 画面表示用コード

```typescript
// 間違い：never型の後にコード
function bad(value: string | number): string {
  if (typeof value === 'string') return value;
  const check: never = value;  // エラー！numberがneverに代入できない
  return 'default';  // 到達可能だが間違い
}

// 正しい実装
function good(value: string | number): string {
  if (typeof value === 'string') return value;
  if (typeof value === 'number') return value.toString();
  const check: never = value;  // OK
  return check;
}
```

```typescript
// 間違い：型ガード不足
type Status = 'active' | 'inactive' | 'pending';

function handle(status: Status): string {
  if (status === 'active') return 'Active';
  const check: never = status;  // エラー！'inactive' | 'pending'が残っている
  return '';
}
```

```typescript
// 間違い：Union型の除外漏れ
type Value = string | number | boolean;

function process(v: Value): string {
  if (typeof v === 'string') return v;
  // numberとbooleanが残っているのにneverチェック
  const check: never = v;  // エラー！
  return '';
}
```

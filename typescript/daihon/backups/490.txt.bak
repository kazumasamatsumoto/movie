# #490「例外まとめ」

四国めたん「never型と例外処理についてまとめましょう！」
ずんだもん「never型のエラー処理のポイントを教えて！」
四国めたん「throw文で例外を投げる関数は never 型です。制御が戻りませんね」
ずんだもん「どう使えばいいの？」
四国めたん「assertNever で網羅性チェック、カスタムエラーで詳細な情報を提供します。try-catchで適切に処理しますね」
ずんだもん「なるほど！型安全なエラー処理なんだね！」
四国めたん「スタックトレースでデバッグし、エラーバウンダリで影響を局所化します。明示的な型宣言と詳細なメッセージが重要です。TypeScript v5.9でも基本パターンですね」
ずんだもん「never型で堅牢なアプリが作れるよ！」

---

## 📺 画面表示用コード

```typescript
// 例外を投げる関数
function fail(message: string): never {
  throw new Error(message);
}
```

```typescript
// 網羅性チェック
function assertNever(value: never): never {
  throw new Error(`Unhandled: ${value}`);
}

type Action = "save" | "delete";
function handle(action: Action): void {
  switch (action) {
    case "save": return;
    case "delete": return;
    default: assertNever(action);
  }
}
```

```typescript
// カスタムエラーとtry-catch
class AppError extends Error {}

try {
  throw new AppError("Error");
} catch (error) {
  if (error instanceof AppError) {
    console.error(error.message);
  }
}
```

# #504「Union型の網羅性」

四国めたん「Union型の網羅性チェックについて学びましょう！」
ずんだもん「Union型でも網羅性をチェックできるの？」
四国めたん「はい、すべての型を処理したか確認できます。型の絞り込みが重要ですね」
ずんだもん「どうやって絞り込むの？」
四国めたん「typeof や instanceof で型を判定します。残りが never になれば完全ですね」
ずんだもん「なるほど！型を1つずつ除外するんだね！」
四国めたん「制御フロー分析が自動で判定します。TypeScript v5.9でも強力ですね」
ずんだもん「型システムが賢いんだね！」

---

## 📺 画面表示用コード

```typescript
// Union型の網羅性チェック
type Value = string | number | boolean;

function process(value: Value): string {
  if (typeof value === "string") {
    return value.toUpperCase();
  } else if (typeof value === "number") {
    return value.toString();
  } else if (typeof value === "boolean") {
    return value ? "true" : "false";
  }
  const exhaustive: never = value;
  return exhaustive;
}
```

```typescript
// クラスのUnion型
class Cat { meow() {} }
class Dog { bark() {} }
type Animal = Cat | Dog;

function makeSound(animal: Animal): void {
  if (animal instanceof Cat) {
    animal.meow();
  } else if (animal instanceof Dog) {
    animal.bark();
  } else {
    assertNever(animal);
  }
}
```

```typescript
// リテラル型のUnion
type Direction = "north" | "south" | "east" | "west";
function move(direction: Direction): void {
  if (direction === "north") return;
  if (direction === "south") return;
  if (direction === "east") return;
  if (direction === "west") return;
  assertNever(direction);
}
```

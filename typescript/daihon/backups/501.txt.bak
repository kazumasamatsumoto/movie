# #501「網羅性チェックとは」

四国めたん「網羅性チェックについて学びましょう！」
ずんだもん「網羅性チェックってなに？」
四国めたん「すべてのケースを処理したか確認することです。型システムで保証できますね」
ずんだもん「どうやって確認するの？」
四国めたん「never型を使います。処理漏れがあると型エラーになりますね」
ずんだもん「なるほど！型で漏れを防ぐんだね！」
四国めたん「Union型やswitch文で重要です。TypeScript v5.9でも強力な機能ですね」
ずんだもん「バグを防げるんだね！」

---

## 📺 画面表示用コード

```typescript
// 網羅性チェックの基本
type Status = "pending" | "success" | "error";

function handleStatus(status: Status): void {
  switch (status) {
    case "pending":
      console.log("Pending");
      break;
    case "success":
      console.log("Success");
      break;
    case "error":
      console.log("Error");
      break;
    default:
      const exhaustive: never = status;  // すべてカバー
  }
}
```

```typescript
// 処理漏れがある場合
function incomplete(status: Status): void {
  switch (status) {
    case "pending":
      return;
    case "success":
      return;
    // errorが未処理
    default:
      const exhaustive: never = status;  // 型エラー！
  }
}
```

```typescript
// 型追加時の検出
type Color = "red" | "blue" | "green";
function getHex(color: Color): string {
  switch (color) {
    case "red": return "#ff0000";
    case "blue": return "#0000ff";
    default: return assertNever(color);  // greenで型エラー
  }
}
```

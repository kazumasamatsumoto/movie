# #505「判別Union型」

四国めたん「判別Union型について学びましょう！」
ずんだもん「判別Union型ってなに？」
四国めたん「共通のプロパティで型を判別できるUnion型です。網羅性チェックが簡単ですね」
ずんだもん「どう書くの？」
四国めたん「type プロパティなどで種類を示します。switch文で網羅性を確認できますね」
ずんだもん「なるほど！判別しやすいんだね！」
四国めたん「Redux actionやイベントでよく使われます。TypeScript v5.9でも推奨されるパターンですね」
ずんだもん「実用的なパターンなんだね！」

---

## 📺 画面表示用コード

```typescript
// 判別Union型
type Circle = { kind: "circle"; radius: number };
type Square = { kind: "square"; size: number };
type Triangle = { kind: "triangle"; base: number; height: number };
type Shape = Circle | Square | Triangle;

function getArea(shape: Shape): number {
  switch (shape.kind) {
    case "circle":
      return Math.PI * shape.radius ** 2;
    case "square":
      return shape.size ** 2;
    case "triangle":
      return (shape.base * shape.height) / 2;
    default:
      return assertNever(shape);
  }
}
```

```typescript
// Reduxアクション
type Action =
  | { type: "increment" }
  | { type: "decrement" }
  | { type: "set"; payload: number };

function reducer(state: number, action: Action): number {
  switch (action.type) {
    case "increment": return state + 1;
    case "decrement": return state - 1;
    case "set": return action.payload;
    default: return assertNever(action);
  }
}
```

```typescript
// イベント
type Event =
  | { type: "click"; x: number; y: number }
  | { type: "keypress"; key: string };

function handleEvent(event: Event): void {
  switch (event.type) {
    case "click":
      console.log(`Clicked at ${event.x}, ${event.y}`);
      break;
    case "keypress":
      console.log(`Key: ${event.key}`);
      break;
    default:
      assertNever(event);
  }
}
```

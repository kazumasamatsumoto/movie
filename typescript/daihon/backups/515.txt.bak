# #515 「コンパイラ最適化」

四国めたん「網羅性チェックによるコンパイラ最適化について学びましょう！」
ずんだもん「網羅性チェックで最適化されるの？」
四国めたん「はい、コンパイラが到達不可能コードを検出し、より効率的なコードを生成できます」
ずんだもん「具体的にどんな最適化がされるの？」
四国めたん「デッドコード削除、分岐予測の改善、インライン化などが行われます」
ずんだもん「なるほど！型安全性と性能が両立するんだね！」
四国めたん「制御フロー分析により、実行時のチェックも削減できますね」
ずんだもん「TypeScript v5.9の型チェック高速化にも繋がるよ！」

---

## 📺 画面表示用コード

```typescript
// コンパイラが最適化可能
type Digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;

function isEven(n: Digit): boolean {
  switch (n) {
    case 0: case 2: case 4: case 6: case 8:
      return true;
    case 1: case 3: case 5: case 7: case 9:
      return false;
    default:
      const check: never = n; // 最適化のヒント
      return false;
  }
}
```

```typescript
// 分岐予測の改善
type Priority = 'high' | 'medium' | 'low';

function getScore(p: Priority): number {
  if (p === 'high') return 3;
  if (p === 'medium') return 2;
  if (p === 'low') return 1;
  const check: never = p; // 到達不可能
  return 0; // デッドコード削除可能
}
```

```typescript
// インライン化の促進
type Bool = true | false;

function not(b: Bool): boolean {
  if (b === true) return false;
  if (b === false) return true;
  const check: never = b;
  throw new Error(); // 削除可能
}
```

# #443「Observableとvoid型」

四国めたん「AngularのObservableとvoid型について学びましょう！」
ずんだもん「Observableでvoidはどう使うの？」
四国めたん「Observable<void> で値を発行しないストリームを表現します。完了通知だけが目的ですね」
ずんだもん「どういう時に使うの？」
四国めたん「アクションの完了、イベントの通知、タスクの終了などで使います」
ずんだもん「なるほど！値じゃなくて通知なんだね！」
四国めたん「RxJSのSubject<void>やtap()演算子でも使われます。TypeScript v5.9でも重要なパターンですね」
ずんだもん「リアクティブプログラミングで便利だね！」

---

## 📺 画面表示用コード

```typescript
// Observable<void>の基本
import { Observable, Subject } from 'rxjs';

class Service {
  private saveComplete$ = new Subject<void>();

  save(data: Data): void {
    database.save(data);
    this.saveComplete$.next();
  }

  onSaveComplete(): Observable<void> {
    return this.saveComplete$.asObservable();
  }
}
```

```typescript
// 購読
service.onSaveComplete().subscribe(() => {
  console.log('Save completed');
});
```

```typescript
// tap()演算子
data$.pipe(
  tap((): void => {
    console.log('Data received');
  })
).subscribe();
```

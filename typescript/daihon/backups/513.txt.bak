# #513 「else節」

四国めたん「else節での網羅性チェックについて学びましょう！」
ずんだもん「else節でどうチェックするの？」
四国めたん「すべてのケースを処理した後のelse節では、型がnever型になります」
ずんだもん「具体的にどう書くの？」
四国めたん「else節でnever型の変数に代入することで、網羅性を保証できます」
ずんだもん「なるほど！else節に到達しないことを型で証明するんだね！」
四国めたん「コンパイル時に100%の網羅性を検証できますね」
ずんだもん「デフォルトケースの処理も型安全になるよ！」

---

## 📺 画面表示用コード

```typescript
type State = 'idle' | 'loading' | 'success' | 'error';

function getLabel(state: State): string {
  if (state === 'idle') return '待機中';
  else if (state === 'loading') return '読込中';
  else if (state === 'success') return '成功';
  else if (state === 'error') return 'エラー';
  else {
    const check: never = state; // never型
    return check;
  }
}
```

```typescript
// else節での型エラー検出
type State = 'idle' | 'loading' | 'success' | 'error' | 'timeout';

function getLabel(state: State): string {
  if (state === 'idle') return '待機中';
  else {
    const check: never = state; // 型エラー！
    return '';
  }
}
```

```typescript
// 正しい実装
function getLabel(state: State): string {
  switch (state) {
    case 'idle': return '待機中';
    case 'loading': return '読込中';
    case 'success': return '成功';
    case 'error': return 'エラー';
    case 'timeout': return 'タイムアウト';
  }
}
```

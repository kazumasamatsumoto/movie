# #390「エラーハンドリング」

四国めたん「void関数でのエラーハンドリングについて学びましょう！」
ずんだもん「void関数でエラーはどう扱うの？」
四国めたん「throw文を使います。例外を投げることはvoid型と互換性があります」
ずんだもん「return文は使わないの？」
四国めたん「エラー時は throw を使い、通常の終了時は return を使います。処理を明確に区別しますね」
ずんだもん「なるほど！エラーと正常終了を分けるんだね！」
四国めたん「try-catch でエラー処理を行います。TypeScript v5.9でも同じパターンですね」
ずんだもん「安全にエラーを扱えるんだね！」

---

## 📺 画面表示用コード

```typescript
// throw文の使用
function validateInput(input: string): void {
  if (input.length === 0) {
    throw new Error("Input is required");
  }
  console.log("Valid input:", input);
}
```

```typescript
// try-catchでのエラー処理
function processUser(user: User): void {
  try {
    validateUser(user);
    saveUser(user);
  } catch (error) {
    console.error("Failed to process user:", error);
  }
}
```

```typescript
// 早期リターンとthrowの組み合わせ
function process(data: Data | null): void {
  if (data === null) return;  // 正常な終了
  if (!data.isValid) throw new Error("Invalid data");  // エラー
  console.log(data);
}
```

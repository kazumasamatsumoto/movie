# #533 「型変換」

四国めたん「never型を使った型変換テクニックについて学びましょう！」
ずんだもん「どんな型変換ができるの？」
四国めたん「Union型からの除外、オブジェクト型のプロパティ削除、配列型の要素フィルタリングなどができますね」
ずんだもん「具体的にどう書くの？」
四国めたん「不要な要素をneverに変換し、型システムが自動的に除外する仕組みを利用します」
ずんだもん「なるほど！型の変形が自在にできるんだね！」
四国めたん「DTOの変換やAPIレスポンスの型調整に活用できますね」
ずんだもん「実務で使える実践的なテクニックだよ！」

---

## 📺 画面表示用コード

```typescript
// Union型からの除外
type Without<T, U> = T extends U ? never : T;

type Numbers = Without<string | number | boolean, string | boolean>;
// = number
```

```typescript
// オブジェクト型の変換
type PickByType<T, ValueType> = {
  [K in keyof T as T[K] extends ValueType ? K : never]: T[K]
};

type StringProps = PickByType<{
  name: string;
  age: number;
  email: string;
}, string>;
// = { name: string; email: string }
```

```typescript
// 深いプロパティの変換
type DeepOmit<T, K extends string> = {
  [P in keyof T as P extends K ? never : P]:
    T[P] extends object ? DeepOmit<T[P], K> : T[P]
};

type Clean = DeepOmit<{
  _id: string;
  user: { _id: string; name: string }
}, '_id'>;
// = { user: { name: string } }
```

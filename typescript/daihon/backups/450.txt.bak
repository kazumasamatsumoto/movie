# #450「ベストプラクティス」

四国めたん「Angular/Nest.jsでのvoid型ベストプラクティスをまとめましょう！」
ずんだもん「フレームワークでのvoidのポイントを教えて！」
四国めたん「イベントハンドラは void、API は Promise<void> を使います。明示的に型を書きますね」
ずんだもん「他に注意点は？」
四国めたん「Observable<void> で通知を表現し、HTTPステータスコードを適切に設定します。エラーハンドリングも必須ですね」
ずんだもん「なるほど！設計の一貫性が大事なんだね！」
四国めたん「RESTful な設計を心がけます。ドキュメントにも明記しましょう。TypeScript v5.9でも推奨されるパターンですね」
ずんだもん「フレームワークで型安全に開発できて最高だよ！」

---

## 📺 画面表示用コード

```typescript
// Angularコンポーネント
@Component({...})
export class UserComponent {
  onClick(): void {
    this.service.save(this.user);
  }
}
```

```typescript
// Nest.jsコントローラ
@Controller('users')
export class UsersController {
  @Delete(':id')
  @HttpCode(204)
  async delete(@Param('id') id: string): Promise<void> {
    await this.usersService.delete(id);
  }
}
```

```typescript
// RxJS Observable
private destroy$ = new Subject<void>();
ngOnDestroy(): void {
  this.destroy$.next();
  this.destroy$.complete();
}
```

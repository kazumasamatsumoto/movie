# #454「デバッグ(1)」

四国めたん「void関数のデバッグについて学びましょう！」
ずんだもん「void関数はどうデバッグするの？」
四国めたん「console.log()で副作用を確認します。戻り値がないため、処理の流れを追いますね」
ずんだもん「どこに置けばいいの？」
四国めたん「関数の開始時、分岐点、終了時に置きます。処理が実行されたか確認できますね」
ずんだもん「なるほど！ログで追跡するんだね！」
四国めたん「デバッガのブレークポイントも有効です。TypeScript v5.9でも同じ方法ですね」
ずんだもん「デバッグツールを活用するんだね！」

---

## 📺 画面表示用コード

```typescript
// デバッグログの追加
function processData(data: Data): void {
  console.log('processData called with:', data);

  if (!data.isValid) {
    console.log('Invalid data, returning early');
    return;
  }

  console.log('Processing data...');
  doSomething(data);
  console.log('processData completed');
}
```

```typescript
// 条件分岐のデバッグ
function update(user: User): void {
  console.log('update start:', user.id);

  if (user.age < 18) {
    console.log('User is minor');
    return;
  }

  console.log('Updating adult user');
  database.update(user);
}
```

```typescript
// ブレークポイント用のコメント
function save(data: Data): void {
  // デバッグポイント: ここで停止
  validateData(data);
  database.save(data);
}
```

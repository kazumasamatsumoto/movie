# #460「マスターチェック」

四国めたん「void型のマスターチェックをしましょう！」
ずんだもん「void型の全体的なポイントを教えて！」
四国めたん「戻り値を返さない関数で使います。副作用のための関数を表現しますね」
ずんだもん「どう使えばいいの？」
四国めたん「明示的に void を書き、async関数は Promise<void> を使います。undefinedとは概念が異なりますね」
ずんだもん「なるほど！使い分けが重要なんだね！」
四国めたん「ジェネリクス、Observable<void>、API設計で活用します。副作用を最小限にし、テスト可能に保ちます。TypeScript v5.9でも基本的な型ですね」
ずんだもん「void型をマスターして型安全な開発ができるよ！」

---

## 📺 画面表示用コード

```typescript
// 基本的な使い方
function log(msg: string): void {
  console.log(msg);
}
async function save(data: Data): Promise<void> {
  await database.save(data);
}
```

```typescript
// ジェネリクスとの組み合わせ
type Callback<T> = (data: T) => void;
const handler: Callback<User> = (user) => {
  console.log(user.name);
};
```

```typescript
// Angular/Nest.jsでの使用
@Component({...})
class UserComponent {
  onClick(): void {
    this.service.save(this.user);
  }
}
```

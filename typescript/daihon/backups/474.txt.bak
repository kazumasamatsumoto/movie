# #474「ユースケース」

四国めたん「never型の実践的なユースケースについて学びましょう！」
ずんだもん「neverはどんな場面で使うの？」
四国めたん「エラー処理、網羅性チェック、アサーション関数で使います」
ずんだもん「具体的にどう使うの？」
四国めたん「switch文の default で exhaustiveCheck を使い、型の漏れを防ぎます」
ずんだもん「なるほど！型安全性を高めるんだね！」
四国めたん「条件付き型での除外にも使われます。TypeScript v5.9でも重要なパターンですね」
ずんだもん「いろんな場所で活躍するんだね！」

---

## 📺 画面表示用コード

```typescript
// 網羅性チェック
function exhaustiveCheck(value: never): never {
  throw new Error(`Unhandled case: ${value}`);
}

type Status = "pending" | "success" | "error";
function handleStatus(status: Status): void {
  switch (status) {
    case "pending": return;
    case "success": return;
    case "error": return;
    default: exhaustiveCheck(status);  // すべてカバー
  }
}
```

```typescript
// エラー処理
function assertNonNull<T>(value: T | null): asserts value is T {
  if (value === null) {
    throw new Error("Value is null");
  }
}
```

```typescript
// 条件付き型
type NonNullable<T> = T extends null | undefined ? never : T;
```

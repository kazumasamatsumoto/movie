# #540 「API設計」

四国めたん「API設計におけるnever型の活用について学びましょう！」
ずんだもん「API設計でnever型をどう使うの？」
四国めたん「レスポンス型、エラー型、ステータスコードを判別Union型で定義し、型安全性を確保します」
ずんだもん「具体的にどう設計するの？」
四国めたん「すべてのエンドポイントのレスポンスパターンを型で表現し、網羅的に処理しますね」
ずんだもん「なるほど！APIの仕様が型で明確になるんだね！」
四国めたん「フロントエンドとバックエンドで型を共有でき、開発効率が向上しますね」
ずんだもん「型安全なAPI開発が実現できるよ！」

---

## 📺 画面表示用コード

```typescript
// API レスポンス型
type ApiResponse<T> =
  | { status: 'success'; data: T }
  | { status: 'error'; error: { code: string; message: string } }
  | { status: 'loading' };

function handleResponse<T>(res: ApiResponse<T>): T | null {
  if (res.status === 'success') return res.data;
  if (res.status === 'error') throw new Error(res.error.message);
  if (res.status === 'loading') return null;
  const check: never = res;
  return null;
}
```

```typescript
// REST API エンドポイント型
type Endpoint =
  | { method: 'GET'; path: string }
  | { method: 'POST'; path: string; body: unknown }
  | { method: 'DELETE'; path: string };

async function request(endpoint: Endpoint): Promise<Response> {
  if (endpoint.method === 'GET') return fetch(endpoint.path);
  if (endpoint.method === 'POST') return fetch(endpoint.path, { method: 'POST', body: JSON.stringify(endpoint.body) });
  if (endpoint.method === 'DELETE') return fetch(endpoint.path, { method: 'DELETE' });
  const check: never = endpoint;
  throw new Error('Invalid endpoint');
}
```

```typescript
// GraphQL操作型
type GqlOperation =
  | { type: 'query'; query: string }
  | { type: 'mutation'; mutation: string }
  | { type: 'subscription'; subscription: string };

function executeGql(op: GqlOperation): Promise<any> {
  if (op.type === 'query') return client.query({ query: op.query });
  if (op.type === 'mutation') return client.mutate({ mutation: op.mutation });
  if (op.type === 'subscription') return client.subscribe({ query: op.subscription });
  const check: never = op;
}
```

# #510「実践例2: イベントハンドリング」

四国めたん「イベントハンドリングでの網羅性チェックを学びましょう！」
ずんだもん「イベント処理でどう使うの？」
四国めたん「すべてのイベントタイプを処理したか確認できます。判別Union型が効果的ですね」
ずんだもん「どんなイベント？」
四国めたん「クリック、キー入力、マウス移動など。typeプロパティで判別しますね」
ずんだもん「なるほど！型安全なイベント処理だね！」
四国めたん「カスタムイベントシステムで活用されます。TypeScript v5.9でも実用的ですね」
ずんだもん「複雑なUIでも安全なんだね！」

---

## 📺 画面表示用コード

```typescript
// イベント型の定義
type UIEvent =
  | { type: "click"; x: number; y: number; button: number }
  | { type: "keypress"; key: string; ctrlKey: boolean }
  | { type: "scroll"; deltaY: number }
  | { type: "resize"; width: number; height: number };
```

```typescript
// イベントハンドラ
function handleEvent(event: UIEvent): void {
  switch (event.type) {
    case "click":
      console.log(`Clicked at (${event.x}, ${event.y})`);
      break;
    case "keypress":
      console.log(`Key: ${event.key}`);
      break;
    case "scroll":
      console.log(`Scrolled: ${event.deltaY}`);
      break;
    case "resize":
      console.log(`Resized: ${event.width}x${event.height}`);
      break;
    default:
      assertNever(event);
  }
}
```

```typescript
// イベントディスパッチャー
class EventDispatcher {
  dispatch(event: UIEvent): void {
    this.validateEvent(event);
    handleEvent(event);
  }

  private validateEvent(event: UIEvent): void {
    // 型システムが網羅性を保証
  }
}
```

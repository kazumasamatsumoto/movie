# #509「実践例1: Redux」

四国めたん「Reduxでの網羅性チェックを学びましょう！」
ずんだもん「Reduxでどう使うの？」
四国めたん「Actionの型をすべて処理したか確認できます。reducerの安全性が向上しますね」
ずんだもん「具体的な書き方は？」
四国めたん「Action型をUnionで定義し、reducerでassertNeverを使います。新しいActionを追加したら型エラーになりますね」
ずんだもん「なるほど！追加漏れを防げるんだね！」
四国めたん「大規模アプリで重要です。TypeScript v5.9でもベストプラクティスですね」
ずんだもん「実用的なパターンなんだね！」

---

## 📺 画面表示用コード

```typescript
// Redux Actionの定義
type Action =
  | { type: "INCREMENT" }
  | { type: "DECREMENT" }
  | { type: "SET"; payload: number }
  | { type: "RESET" };

type State = { count: number };
```

```typescript
// Reducer with exhaustiveness check
function reducer(state: State, action: Action): State {
  switch (action.type) {
    case "INCREMENT":
      return { count: state.count + 1 };
    case "DECREMENT":
      return { count: state.count - 1 };
    case "SET":
      return { count: action.payload };
    case "RESET":
      return { count: 0 };
    default:
      return assertNever(action);
  }
}
```

```typescript
// Action Creator
const actions = {
  increment: (): Action => ({ type: "INCREMENT" }),
  decrement: (): Action => ({ type: "DECREMENT" }),
  set: (payload: number): Action => ({ type: "SET", payload }),
  reset: (): Action => ({ type: "RESET" }),
};
```

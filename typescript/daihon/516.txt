# #516「静的解析との連携」

四国めたん「網羅性チェックと静的解析の連携を学びましょう！」
ずんだもん「静的解析ってなに？」
四国めたん「コードを実行せずに問題を見つける技術です。ESLintやTypeScript本体が使いますね」
ずんだもん「網羅性チェックとどう連携するの？」
四国めたん「ESLintでswitch文のdefault節を強制したり、未処理のケースを警告できます。型チェックと組み合わせて完璧ですね」
ずんだもん「なるほど！二重の安全網なんだね！」
四国めたん「CIで自動チェックできます。TypeScript v5.9でも静的解析が強化されていますね」
ずんだもん「チーム開発で効果的だね！」

---

## 📺 画面表示用コード

```typescript
// ESLint設定例
// .eslintrc.json
{
  "rules": {
    "default-case": "error",  // default節を強制
    "@typescript-eslint/switch-exhaustiveness-check": "error"
  }
}
```

```typescript
// 網羅性チェックのヘルパー
type Exhaustive<T> = T extends never ? true : false;

type Status = "pending" | "success" | "error";
type AllHandled = Exhaustive<Exclude<Status, "pending" | "success" | "error">>;
// true になる（すべて処理済み）
```

```typescript
// TypeScript strict モード
// tsconfig.json
{
  "compilerOptions": {
    "strict": true,
    "noImplicitReturns": true,  // 戻り値の網羅性
    "noFallthroughCasesInSwitch": true  // case文のフォールスルー防止
  }
}
```

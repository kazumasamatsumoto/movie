# #515「コンパイラ最適化」

四国めたん「網羅性チェックとコンパイラ最適化について学びましょう！」
ずんだもん「コンパイラが最適化してくれるの？」
四国めたん「はい、網羅性が証明されると到達不可能コードを削除できます。バンドルサイズが減りますね」
ずんだもん「どんな最適化？」
四国めたん「default節のassertNever呼び出しは実行時に削除されます。型チェックだけで十分ですね」
ずんだもん「なるほど！実行時オーバーヘッドがないんだね！」
四国めたん「制御フロー解析により安全に最適化されます。TypeScript v5.9では更に賢くなっていますね」
ずんだもん「型安全で高速なんだね！」

---

## 📺 画面表示用コード

```typescript
// コンパイル前
type Color = "red" | "green" | "blue";

function getHex(color: Color): string {
  switch (color) {
    case "red": return "#FF0000";
    case "green": return "#00FF00";
    case "blue": return "#0000FF";
    default:
      return assertNever(color);  // 最適化で削除される
  }
}
```

```typescript
// コンパイル後のJavaScript（イメージ）
function getHex(color) {
  switch (color) {
    case "red": return "#FF0000";
    case "green": return "#00FF00";
    case "blue": return "#0000FF";
    // default節は削除される
  }
}
```

```typescript
// 到達不可能コードの除去
function example(x: "a" | "b"): void {
  if (x === "a") return;
  if (x === "b") return;

  // この部分は完全に削除される
  const _exhaustive: never = x;
  console.log("Never executed");
}
```
